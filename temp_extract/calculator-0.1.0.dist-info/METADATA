Metadata-Version: 2.1
Name: calculator
Version: 0.1.0
Summary: A simple calculator package with basic arithmetic operations
Home-page: https://github.com/tkc/poetry-package-sandbox
License: MIT
Author: Takeshi Iijima
Author-email: takeshi.iijima@example.com
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Project-URL: Repository, https://github.com/tkc/poetry-package-sandbox
Description-Content-Type: text/markdown

# Python Packaging Sample: Simple Calculator

このリポジトリは、Poetryを使用したモダンなPythonパッケージの作成方法を示す例です。内部モジュール名と公開パッケージ名が異なる場合のベストプラクティスを含みます。

## パッケージの特徴

- 基本的な計算機能（加算など）
- 内部モジュール名（`cal`）と公開パッケージ名（`calculator`）が異なる構造
- 両方の名前でインポート可能なエイリアス機能

## インストール方法

```bash
# GitHubからインストール
pip install git+https://github.com/tkc/poetry-package-sandbox.git

# 特定のバージョンタグを指定してインストール
pip install git+https://github.com/tkc/poetry-package-sandbox.git@v0.0.1
```

## 使用方法

### 基本的な使い方

```python
# 方法1: 内部モジュール名を使用
from cal import Calculator

# 方法2: 公開パッケージ名を使用（推奨）
from calculator import Calculator

# 計算機インスタンスの作成
calc = Calculator()

# 基本的な計算
result = calc.add(5, 3)      # 8を返す
print(f"5 + 3 = {result}")
```

### コマンドラインインターフェース

```bash
# 基本的な計算
calculate add 5 3
```

## プロジェクト構造

```
poetry-package/
├── src/
│   ├── cal/              # 内部モジュール
│   │   ├── __init__.py
│   │   └── calculator.py  # 実際の計算機能の実装
│   ├── calculator.py     # エイリアスモジュール
│   └── __init__.py
├── examples/
├── pyproject.toml        # Poetry設定とメタデータ
├── README.md
└── LICENSE
```

## 開発ガイド

### 開発環境のセットアップ

```bash
# リポジトリのクローン
git clone https://github.com/tkc/poetry-package-sandbox.git
cd poetry-package-sandbox

# Poetryで依存関係をインストール
poetry install

# 仮想環境を有効化
poetry shell
```

### パッケージのビルド

```bash
# ディストリビューションパッケージの作成
poetry build

# PyPIへの公開（アクセス権がある場合）
poetry publish
```

## パッケージ構造の検証

このプロジェクトは、内部モジュール名（`cal`）と公開パッケージ名（`calculator`）が異なる場合の解決策を示しています。パッケージ構造を確認するには：

### パッケージのビルドと検査

```bash
# パッケージをビルド
poetry build

# 検査用の一時ディレクトリを作成
mkdir temp_extract
cd temp_extract

# wheelファイルを展開して内容を確認
unzip -q ../dist/calculator-0.1.0-py2.py3-none-any.whl -d .

# 展開した内容を一覧表示
ls -la
```

### 確認すべきポイント

1. 展開したパッケージには `cal` ディレクトリと `calculator.py` ファイルの両方が含まれていること
2. 構造がソースレイアウトと一致していること:
   ```
   cal/
   ├── __init__.py
   └── calculator.py
   calculator.py   # エイリアスモジュール
   ```

### 重要な設定

`pyproject.toml` では、以下のようにパッケージ構造を指定しています:
```toml
packages = [
    { include = "cal", from = "src" },
    { include = "calculator.py", from = "src" }
]
```

このパッケージをインストールすると、以下の2つの方法でインポートできます:
```python
# 方法1: 内部モジュール名を使用
from cal import Calculator

# 方法2: 公開パッケージ名を使用（推奨）
from calculator import Calculator
```

### インポート動作のテスト

実際のインポート動作をテストするには:

```bash
# 開発モードでパッケージをインストール
pip install -e .

# インポートをテスト
python -c "import cal; print('calモジュールが存在します')"
python -c "import calculator; print('calculatorモジュールが存在します')"
python -c "from calculator import Calculator; calc = Calculator(); print(calc.add(2, 3))"
```

## 学習リソース

Pythonパッケージングに関する詳細情報:

- [Python Packaging Authority (PyPA) ドキュメント](https://packaging.python.org/)
- [Poetry ドキュメント](https://python-poetry.org/docs/)
- [パッケージ配布仕様](https://packaging.python.org/specifications/)

## ライセンス

このプロジェクトはMITライセンスの下で提供されています - 詳細はLICENSEファイルを参照してください。

